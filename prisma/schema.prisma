generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  domain    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  users     User[]
  jobs      Job[]
  resumes   Resume[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs      Job[]
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
}

model Job {
  id                 Int           @id @default(autoincrement())
  interviewQuestions Json
  jobDescription     String
  jobLocation        String
  jobTitle           String
  remoteFriendly     Boolean       @default(false)
  responsibilities   Json
  seniority          String
  userId             Int
  requirements       Json
  salary             Int?
  company             Company? @relation(fields: [companyId], references: [id])
  companyId           Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  isArchived         Boolean       @default(false)
  candidates         Candidate[]
  user               User          @relation(fields: [userId], references: [id])
  phoneScreens       PhoneScreen[]
}

model Candidate {
  id          Int             @id @default(autoincrement())
  jobPostId   Int
  name        String
  phone       String
  email       String
  resumeUrl   String
  linkedinUrl String?
  status      CandidateStatus @default(OPEN)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  jobPost     Job             @relation(fields: [jobPostId], references: [id])
  phoneScreen PhoneScreen?
}

model PhoneScreen {
  id                     Int       @id @default(autoincrement())
  candidateId            Int       @unique
  createdAt              DateTime?
  updatedAt              DateTime  @updatedAt
  answeredBy             String?
  batchId                String?
  callId                 String
  callLength             Float?
  completed              Boolean?
  concatenatedTranscript String?
  correctedDuration      Int?
  endAt                  DateTime?
  endpointUrl            String?
  errorMessage           String?
  from                   String?
  inbound                Boolean?
  jobId                  Int
  language               String?
  maxDuration            Int?
  price                  Float?
  queueStatus            String?
  record                 Boolean?
  recordingUrl           String?
  requestPhoneNumber     String?
  status                 String?
  to                     String?
  transcripts            Json?
  variables              Json?
  wait                   Boolean?
  analysis               Json?
  qualificationScore     Float?
  candidate              Candidate @relation(fields: [candidateId], references: [id])
  job                    Job       @relation(fields: [jobId], references: [id])
}

model PilotProgramApplicant {
  id               Int      @id @default(autoincrement())
  company          String
  firstName        String
  lastName         String
  email            String   @unique
  weeklyApplicants Int
  createdAt        DateTime @default(now())
}

model Resume {
  id         Int      @id @default(autoincrement())
  url        String
  weaviateId String?
  company    Company? @relation(fields: [companyId], references: [id])
  companyId  Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum CandidateStatus {
  OPEN
  ACCEPTED
  REJECTED
  ARCHIVED
}
