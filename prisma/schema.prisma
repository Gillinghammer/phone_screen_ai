generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Company {
  id                   Int           @id @default(autoincrement())
  name                 String
  domain               String        @unique
  webhookUrl           String?       // Add this line
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  jobs                 Job[]
  resumes              Resume[]
  users                User[]
  stripeCustomerId     String?       @unique
  stripeSubscriptionIds String[]     // Array of subscription IDs
  subscriptions        Subscription[] // Relation to Subscription model
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  name              String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  companyId         Int?
  company           Company?  @relation(fields: [companyId], references: [id])
  role              UserRole  @default(MEMBER)
  jobs              Job[]
  resetToken        String?   
  resetTokenExpires DateTime? 
}

model Subscription {
  id                Int               @id @default(autoincrement())
  companyId         Int
  company           Company           @relation(fields: [companyId], references: [id])
  stripeSubscriptionId String         @unique
  status            SubscriptionStatus @default(INACTIVE)
  plan              String            // Flexible string instead of enum
  startDate         DateTime
  endDate           DateTime?
  product           String            // Identify which product this subscription is for
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Job {
  id                 Int           @id @default(autoincrement())
  interviewQuestions Json
  jobDescription     String
  jobLocation        String
  jobTitle           String
  remoteFriendly     Boolean       @default(false)
  responsibilities   Json
  seniority          String
  userId             Int
  requirements       Json
  salary             Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  isArchived         Boolean       @default(false)
  companyId          Int?
  uuid               String        @default(uuid())
  blandPathwayId     String?       // Add this line
  candidates         Candidate[]
  company            Company?      @relation(fields: [companyId], references: [id])
  user               User          @relation(fields: [userId], references: [id])
  phoneScreens       PhoneScreen[]
}

model Candidate {
  id          Int             @id @default(autoincrement())
  jobPostId   Int
  name        String
  phone       String
  email       String
  resumeUrl   String
  linkedinUrl String?
  status      CandidateStatus @default(OPEN)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  jobPost     Job             @relation(fields: [jobPostId], references: [id])
  phoneScreen PhoneScreen?
}

model PhoneScreen {
  id                     Int       @id @default(autoincrement())
  candidateId            Int       @unique
  createdAt              DateTime?
  updatedAt              DateTime  @updatedAt
  answeredBy             String?
  batchId                String?
  callId                 String
  callLength             Float?
  completed              Boolean?
  concatenatedTranscript String?
  correctedDuration      Int?
  endAt                  DateTime?
  endpointUrl            String?
  errorMessage           String?
  from                   String?
  inbound                Boolean?
  jobId                  Int
  language               String?
  maxDuration            Int?
  price                  Float?
  queueStatus            String?
  record                 Boolean?
  recordingUrl           String?
  requestPhoneNumber     String?
  status                 String?
  to                     String?
  transcripts            Json?
  variables              Json?
  wait                   Boolean?
  analysis               Json?
  qualificationScore     Float?
  analysisV2             Json?
  candidate              Candidate @relation(fields: [candidateId], references: [id])
  job                    Job       @relation(fields: [jobId], references: [id])
}

model PilotProgramApplicant {
  id               Int      @id @default(autoincrement())
  company          String
  firstName        String
  lastName         String
  email            String   @unique
  weeklyApplicants Int
  createdAt        DateTime @default(now())
}

model Resume {
  id         Int      @id @default(autoincrement())
  url        String
  weaviateId String?
  companyId  Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company? @relation(fields: [companyId], references: [id])
}

enum CandidateStatus {
  OPEN
  ACCEPTED
  REJECTED
  ARCHIVED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
}

enum UserRole {
  ADMIN
  MEMBER
}